{"ast":null,"code":"\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i = str.length;\n\n  while (i) {\n    hash = hash * 33 ^ str.charCodeAt(--i);\n  }\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n\n\n  return hash >>> 0;\n}\n\nmodule.exports = hash;","map":{"version":3,"names":["hash","str","i","length","charCodeAt","module","exports"],"sources":["/home/ambrose/Desktop/dowellnps frontend/client/node_modules/string-hash/index.js"],"sourcesContent":["\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n"],"mappings":"AAAA;;AAEA,SAASA,IAAT,CAAcC,GAAd,EAAmB;EACjB,IAAID,IAAI,GAAG,IAAX;EAAA,IACIE,CAAC,GAAMD,GAAG,CAACE,MADf;;EAGA,OAAMD,CAAN,EAAS;IACPF,IAAI,GAAIA,IAAI,GAAG,EAAR,GAAcC,GAAG,CAACG,UAAJ,CAAe,EAAEF,CAAjB,CAArB;EACD;EAED;AACF;AACA;;;EACE,OAAOF,IAAI,KAAK,CAAhB;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiBN,IAAjB"},"metadata":{},"sourceType":"script"}