{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge; // The default allowed delta for keyframe distance\n\nvar keyframeDistance = 10;\nvar defaultNormalizedFrames = {\n  'from': 'from',\n  '0%': 'from',\n  'to': 'to',\n  '100%': 'to'\n};\n/**\n * Takes an array of strings representing transform values and\n * merges them. Ignores duplicates and 'none'.\n * @param {Array} transforms Array<string>\n * @returns {String} merged\n * @private\n * @example\n * mergeTransforms([\n *   'translateX(10px)',\n *   'rotateX(120deg)',\n *   'translateX(10px)',\n *   'none',\n * ])\n * // -> 'translateX(10px) rotateX(120deg)'\n *\n */\n\nvar mergeTransforms = function mergeTransforms(transforms) {\n  var filtered = transforms.filter(function (transform, i) {\n    return transform !== 'none' && transforms.indexOf(transform) === i;\n  });\n  return filtered.join(' ');\n};\n/**\n * Returns whichever value is actually defined\n * @param {String|Number} primary CSSValue\n * @param {String|Number} secondary CSSValue\n * @returns {String|Number} defined CSSValue\n * @private\n */\n\n\nvar getDefined = function getDefined(primary, secondary) {\n  return typeof primary !== 'undefined' ? primary : secondary;\n};\n/**\n * Takes a source animation and the current cache, populating the\n * cache with the normalized keyframes and returning a copy of the\n * source animation with the normalized keyframes as well.\n *\n * It uses keyframeDistance to determine how much it should normalize\n * frames.\n * @param {Object} source Animation\n * @param {Object} cache FrameMap\n * @returns {Object} Animation\n * @private\n */\n\n\nvar normalizeFrames = function normalizeFrames(source, cache) {\n  var normalized = {};\n\n  for (var frame in source) {\n    var normalizedFrame = defaultNormalizedFrames[frame] || Math.round(parseFloat(frame) / keyframeDistance) * keyframeDistance + '%';\n    normalized[normalizedFrame] = source[frame];\n    cache[normalizedFrame] = normalizedFrame;\n  }\n\n  return normalized;\n};\n\nvar mergeFrames = function mergeFrames(primaryFrame, secondaryFrame, target) {\n  // Walk through all properties in the primary frame\n  for (var propertyName in primaryFrame) {\n    // Transform is special cased, as we want to combine both\n    // transforms when posssible.\n    if (propertyName === 'transform') {\n      // But we dont need to do anything if theres no other\n      // transform to merge.\n      if (secondaryFrame[propertyName]) {\n        var newTransform = mergeTransforms([primaryFrame[propertyName], secondaryFrame[propertyName]]); // We make the assumption that animations use 'transform: none'\n        // to terminate the keyframe. If we're combining two animations\n        // that may terminate at separte frames, its safest to just\n        // ignore this.\n\n        if (newTransform !== 'none') {\n          target[propertyName] = newTransform;\n        }\n      } else {\n        var propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n        target[propertyName] = propertyValue;\n      }\n    } else {\n      // Use a typeof check so we don't ignore falsy values like 0.\n      var _propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n\n      target[propertyName] = _propertyValue;\n    }\n  } // Walk through all properties in the secondary frame.\n  // We should be able to assume that any property that\n  // needed to be merged has already been merged when we\n  // walked the primary frame.\n\n\n  for (var _propertyName in secondaryFrame) {\n    var _propertyValue2 = secondaryFrame[_propertyName]; // Again, ignore 'transform: none'\n\n    if (_propertyName === 'transform' && _propertyValue2 === 'none') {\n      continue;\n    }\n\n    target[_propertyName] = target[_propertyName] || _propertyValue2;\n  }\n};\n\nvar populateDefinedFrame = function populateDefinedFrame(primaryFrame, secondaryFrame) {\n  var definedFrame = primaryFrame || secondaryFrame;\n  var target = {};\n\n  for (var propertyName in definedFrame) {\n    var propertyValue = definedFrame[propertyName]; // Again, ignore 'transform: none'\n\n    if (propertyName === 'transform' && propertyValue === 'none') {\n      continue;\n    }\n\n    target[propertyName] = propertyValue;\n  } // Only define a frame if there are actual styles to apply\n\n\n  if (Object.keys(target).length) {\n    return target;\n  }\n\n  return null;\n};\n/**\n * Merge lets you take two Animations and merge them together. It\n * iterates through each animation and merges each keyframe. It\n * special cases the `transform` property and uses string interop.\n * to merge the two transforms.\n *\n * This is *at your own risk* and will not work with animations\n * that are clearly opposites (fadeIn and fadeOut).\n *\n * @param {Object} primary Animation\n * @param {Object} secondary Animation\n * @returns {Object} merged Animation\n * @example\n * import { merge, tada, flip } from 'react-animations';\n * const tadaFlip = merge(tada, flip);\n */\n\n\nfunction merge(primary, secondary) {\n  // A map used to track the normalized frame value in cases where\n  // two animations contain frames that appear closely, but not exactly\n  var normalizedFrames = {}; // We merge each frame into a new object and return it\n\n  var merged = {};\n  var normalizedPrimary = normalizeFrames(primary, normalizedFrames);\n  var normalizedSecondary = normalizeFrames(secondary, normalizedFrames); // Iterate all normalized frames\n\n  for (var frame in normalizedFrames) {\n    var primaryFrame = normalizedPrimary[frame];\n    var secondaryFrame = normalizedSecondary[frame]; // Create a new frame object if it doesn't exist.\n\n    var target = merged[frame] || (merged[frame] = {}); // If both aniatmions define this frame, merge them carefully\n\n    if (primaryFrame && secondaryFrame) {\n      mergeFrames(primaryFrame, secondaryFrame, target);\n    } else {\n      // Otherwise find the defined frime and populate all properties\\\n      // except for \"transform\" when the value is none.\n      var keyframe = populateDefinedFrame(primaryFrame, secondaryFrame);\n\n      if (keyframe) {\n        merged[frame] = keyframe;\n      }\n    }\n  }\n\n  return merged;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","merge","keyframeDistance","defaultNormalizedFrames","mergeTransforms","transforms","filtered","filter","transform","i","indexOf","join","getDefined","primary","secondary","normalizeFrames","source","cache","normalized","frame","normalizedFrame","Math","round","parseFloat","mergeFrames","primaryFrame","secondaryFrame","target","propertyName","newTransform","propertyValue","_propertyValue","_propertyName","_propertyValue2","populateDefinedFrame","definedFrame","keys","length","normalizedFrames","merged","normalizedPrimary","normalizedSecondary","keyframe"],"sources":["/home/ambrose/Desktop/dowellnps frontend/client/node_modules/react-animations/lib/merge.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\n\n\n// The default allowed delta for keyframe distance\nvar keyframeDistance = 10;\n\nvar defaultNormalizedFrames = {\n  'from': 'from',\n  '0%': 'from',\n  'to': 'to',\n  '100%': 'to'\n};\n\n/**\n * Takes an array of strings representing transform values and\n * merges them. Ignores duplicates and 'none'.\n * @param {Array} transforms Array<string>\n * @returns {String} merged\n * @private\n * @example\n * mergeTransforms([\n *   'translateX(10px)',\n *   'rotateX(120deg)',\n *   'translateX(10px)',\n *   'none',\n * ])\n * // -> 'translateX(10px) rotateX(120deg)'\n *\n */\nvar mergeTransforms = function mergeTransforms(transforms) {\n  var filtered = transforms.filter(function (transform, i) {\n    return transform !== 'none' && transforms.indexOf(transform) === i;\n  });\n  return filtered.join(' ');\n};\n\n/**\n * Returns whichever value is actually defined\n * @param {String|Number} primary CSSValue\n * @param {String|Number} secondary CSSValue\n * @returns {String|Number} defined CSSValue\n * @private\n */\nvar getDefined = function getDefined(primary, secondary) {\n  return typeof primary !== 'undefined' ? primary : secondary;\n};\n\n/**\n * Takes a source animation and the current cache, populating the\n * cache with the normalized keyframes and returning a copy of the\n * source animation with the normalized keyframes as well.\n *\n * It uses keyframeDistance to determine how much it should normalize\n * frames.\n * @param {Object} source Animation\n * @param {Object} cache FrameMap\n * @returns {Object} Animation\n * @private\n */\nvar normalizeFrames = function normalizeFrames(source, cache) {\n  var normalized = {};\n  for (var frame in source) {\n    var normalizedFrame = defaultNormalizedFrames[frame] || Math.round(parseFloat(frame) / keyframeDistance) * keyframeDistance + '%';\n    normalized[normalizedFrame] = source[frame];\n    cache[normalizedFrame] = normalizedFrame;\n  }\n  return normalized;\n};\n\nvar mergeFrames = function mergeFrames(primaryFrame, secondaryFrame, target) {\n  // Walk through all properties in the primary frame\n  for (var propertyName in primaryFrame) {\n    // Transform is special cased, as we want to combine both\n    // transforms when posssible.\n    if (propertyName === 'transform') {\n      // But we dont need to do anything if theres no other\n      // transform to merge.\n      if (secondaryFrame[propertyName]) {\n        var newTransform = mergeTransforms([primaryFrame[propertyName], secondaryFrame[propertyName]]);\n        // We make the assumption that animations use 'transform: none'\n        // to terminate the keyframe. If we're combining two animations\n        // that may terminate at separte frames, its safest to just\n        // ignore this.\n        if (newTransform !== 'none') {\n          target[propertyName] = newTransform;\n        }\n      } else {\n        var propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n        target[propertyName] = propertyValue;\n      }\n    } else {\n      // Use a typeof check so we don't ignore falsy values like 0.\n      var _propertyValue = getDefined(primaryFrame[propertyName], secondaryFrame[propertyName]);\n      target[propertyName] = _propertyValue;\n    }\n  }\n  // Walk through all properties in the secondary frame.\n  // We should be able to assume that any property that\n  // needed to be merged has already been merged when we\n  // walked the primary frame.\n  for (var _propertyName in secondaryFrame) {\n    var _propertyValue2 = secondaryFrame[_propertyName];\n    // Again, ignore 'transform: none'\n    if (_propertyName === 'transform' && _propertyValue2 === 'none') {\n      continue;\n    }\n    target[_propertyName] = target[_propertyName] || _propertyValue2;\n  }\n};\n\nvar populateDefinedFrame = function populateDefinedFrame(primaryFrame, secondaryFrame) {\n  var definedFrame = primaryFrame || secondaryFrame;\n  var target = {};\n  for (var propertyName in definedFrame) {\n    var propertyValue = definedFrame[propertyName];\n    // Again, ignore 'transform: none'\n    if (propertyName === 'transform' && propertyValue === 'none') {\n      continue;\n    }\n    target[propertyName] = propertyValue;\n  }\n  // Only define a frame if there are actual styles to apply\n  if (Object.keys(target).length) {\n    return target;\n  }\n  return null;\n};\n\n/**\n * Merge lets you take two Animations and merge them together. It\n * iterates through each animation and merges each keyframe. It\n * special cases the `transform` property and uses string interop.\n * to merge the two transforms.\n *\n * This is *at your own risk* and will not work with animations\n * that are clearly opposites (fadeIn and fadeOut).\n *\n * @param {Object} primary Animation\n * @param {Object} secondary Animation\n * @returns {Object} merged Animation\n * @example\n * import { merge, tada, flip } from 'react-animations';\n * const tadaFlip = merge(tada, flip);\n */\nfunction merge(primary, secondary) {\n  // A map used to track the normalized frame value in cases where\n  // two animations contain frames that appear closely, but not exactly\n  var normalizedFrames = {};\n\n  // We merge each frame into a new object and return it\n  var merged = {};\n\n  var normalizedPrimary = normalizeFrames(primary, normalizedFrames);\n\n  var normalizedSecondary = normalizeFrames(secondary, normalizedFrames);\n\n  // Iterate all normalized frames\n  for (var frame in normalizedFrames) {\n    var primaryFrame = normalizedPrimary[frame];\n    var secondaryFrame = normalizedSecondary[frame];\n    // Create a new frame object if it doesn't exist.\n    var target = merged[frame] || (merged[frame] = {});\n\n    // If both aniatmions define this frame, merge them carefully\n    if (primaryFrame && secondaryFrame) {\n      mergeFrames(primaryFrame, secondaryFrame, target);\n    } else {\n      // Otherwise find the defined frime and populate all properties\\\n      // except for \"transform\" when the value is none.\n      var keyframe = populateDefinedFrame(primaryFrame, secondaryFrame);\n      if (keyframe) {\n        merged[frame] = keyframe;\n      }\n    }\n  }\n  return merged;\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}